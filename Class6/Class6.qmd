---
title: "Class6"
author: "Uwaysah"
format: pdf
editor: visual
---

>To open: go into BIMM 143 folder, go to file, new project, new directory, new project, name it, new file, quarto document, title and author, click create empty document. 

>To open a line of code in quarto, have to click +C button 

```{r}
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)

mean(student1)
mean(student2)
```
>every function has a name, an argument (inputs), and a body 

```{r}
mean(student2, na.rm=TRUE)
mean(student3, na.rm=TRUE)
```
```{r}
student2
is.na(student2)
```

```{r}
student2[c(T,F,T,T,T,T,T,T)]
student2[is.na(student2)]
which(is.na(student2))

student2[is.na(student2)] <- 0
student2

is.na(student3)
student3[is.na(student3)] <-0
student3
```
```{r}
x <- student1
x[is.na(x)] <-0
mean(x)

y <- student2
y[is.na(y)] <-0
mean(y)

z <- student3
z[is.na(z)] <-0
mean(z)
```
```{r}
#we want to drop the lowest score before taking the average grade.
x <-student3
x[-which.min(x)]
mean(x[-which.min(x)])
```
```{r}
#name in our case is "grade", input arguments are "student1" etc., and body is working snippet
grade <- function(x) {
  x[is.na(x)] <-0
mean(x[-which.min(x)])
}
```

>can I use this function now? You have to read the code first in R

```{r}
grade(student1)
grade(student2)
grade(student3)
```
```{r}
#read a gradebook from online:
hw <- read.csv("https://tinyurl.com/gradeinput", row.names = 1)
hw
```
```{r}
#Q1: Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: “https://tinyurl.com/gradeinput” [3pts]

#apply(data, margin=1 where 1 means rows and 2 means columns, function)

ans <- apply(hw, 1, grade)
ans
```
>note to self: to save a file while you're working on it, just click the save button and name the file. It will be saved to RStudio, not your desktop

>Q2: Using your grade() function and the supplied gradebook, Who is the top scoring student
overall in the gradebook? [3pts]

```{r}
ans[which.max(ans)]
```
>Q3: From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? [2pts]

```{r}
ave.scores <-apply(hw, 2, mean, na.rm=TRUE)
which.min(ave.scores)
```
```{r}
tot.scores <- apply(hw, 2, sum, na.rm=TRUE)
which.min(tot.scores)
```
```{r}
tot.scores
ave.scores
```
>It seems like hw3 was the toughest on students. 


>Q4: Optional Extension: From your analysis of the gradebook, which homework was most
predictive of overall score (i.e. highest correlation with average grade score)? [1pt]

```{r}
hw$hw1
ans
```

```{r}
cor(hw$hw1, ans)
cor(hw$hw3, ans)
```

```{r}
mask <- hw
mask [is.na(mask)] <-0
mask
```
```{r}
cor(mask$hw5, ans)
```
>We can use the apply function here on the columns of hw and pass it the overall scores for the class (in my 'ans' object as an extra argument).

```{r}
apply(mask, 2, cor, y=ans)
```
>hw5 was most predictive of overall score because its correlation was highest. 
